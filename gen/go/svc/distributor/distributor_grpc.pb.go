// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/distributor/distributor.proto

package city

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistributorService_CreateDistributor_FullMethodName            = "/distributor.DistributorService/CreateDistributor"
	DistributorService_GetDistributor_FullMethodName               = "/distributor.DistributorService/GetDistributor"
	DistributorService_SelectDistributors_FullMethodName           = "/distributor.DistributorService/SelectDistributors"
	DistributorService_UpdateDistributorName_FullMethodName        = "/distributor.DistributorService/UpdateDistributorName"
	DistributorService_UpdateDistributorIcon_FullMethodName        = "/distributor.DistributorService/UpdateDistributorIcon"
	DistributorService_SetDistributorStatusInactive_FullMethodName = "/distributor.DistributorService/SetDistributorStatusInactive"
	DistributorService_SetDistributorStatusActive_FullMethodName   = "/distributor.DistributorService/SetDistributorStatusActive"
	DistributorService_GetDistributorBlock_FullMethodName          = "/distributor.DistributorService/GetDistributorBlock"
	DistributorService_SelectDistributorBlocks_FullMethodName      = "/distributor.DistributorService/SelectDistributorBlocks"
	DistributorService_BlockDistributor_FullMethodName             = "/distributor.DistributorService/BlockDistributor"
	DistributorService_UnblockDistributor_FullMethodName           = "/distributor.DistributorService/UnblockDistributor"
)

// DistributorServiceClient is the client API for DistributorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributorServiceClient interface {
	CreateDistributor(ctx context.Context, in *CreateDistributorRequest, opts ...grpc.CallOption) (*Distributor, error)
	GetDistributor(ctx context.Context, in *GetDistributorRequest, opts ...grpc.CallOption) (*Distributor, error)
	SelectDistributors(ctx context.Context, in *SelectDistributorsRequest, opts ...grpc.CallOption) (*DistributorList, error)
	UpdateDistributorName(ctx context.Context, in *UpdateDistributorNameRequest, opts ...grpc.CallOption) (*Distributor, error)
	UpdateDistributorIcon(ctx context.Context, in *UpdateDistributorIconRequest, opts ...grpc.CallOption) (*Distributor, error)
	SetDistributorStatusInactive(ctx context.Context, in *SetDistributorStatusInactiveRequest, opts ...grpc.CallOption) (*Distributor, error)
	SetDistributorStatusActive(ctx context.Context, in *SetDistributorStatusActiveRequest, opts ...grpc.CallOption) (*Distributor, error)
	GetDistributorBlock(ctx context.Context, in *GetDistributorBlockRequest, opts ...grpc.CallOption) (*DistributorBlock, error)
	SelectDistributorBlocks(ctx context.Context, in *SelectDistributorBlocksRequest, opts ...grpc.CallOption) (*DistributorBlocksList, error)
	// Admin methods
	BlockDistributor(ctx context.Context, in *BlockDistributorRequest, opts ...grpc.CallOption) (*DistributorBlock, error)
	UnblockDistributor(ctx context.Context, in *UnblockDistributorRequest, opts ...grpc.CallOption) (*DistributorBlock, error)
}

type distributorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributorServiceClient(cc grpc.ClientConnInterface) DistributorServiceClient {
	return &distributorServiceClient{cc}
}

func (c *distributorServiceClient) CreateDistributor(ctx context.Context, in *CreateDistributorRequest, opts ...grpc.CallOption) (*Distributor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distributor)
	err := c.cc.Invoke(ctx, DistributorService_CreateDistributor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) GetDistributor(ctx context.Context, in *GetDistributorRequest, opts ...grpc.CallOption) (*Distributor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distributor)
	err := c.cc.Invoke(ctx, DistributorService_GetDistributor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) SelectDistributors(ctx context.Context, in *SelectDistributorsRequest, opts ...grpc.CallOption) (*DistributorList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributorList)
	err := c.cc.Invoke(ctx, DistributorService_SelectDistributors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) UpdateDistributorName(ctx context.Context, in *UpdateDistributorNameRequest, opts ...grpc.CallOption) (*Distributor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distributor)
	err := c.cc.Invoke(ctx, DistributorService_UpdateDistributorName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) UpdateDistributorIcon(ctx context.Context, in *UpdateDistributorIconRequest, opts ...grpc.CallOption) (*Distributor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distributor)
	err := c.cc.Invoke(ctx, DistributorService_UpdateDistributorIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) SetDistributorStatusInactive(ctx context.Context, in *SetDistributorStatusInactiveRequest, opts ...grpc.CallOption) (*Distributor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distributor)
	err := c.cc.Invoke(ctx, DistributorService_SetDistributorStatusInactive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) SetDistributorStatusActive(ctx context.Context, in *SetDistributorStatusActiveRequest, opts ...grpc.CallOption) (*Distributor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distributor)
	err := c.cc.Invoke(ctx, DistributorService_SetDistributorStatusActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) GetDistributorBlock(ctx context.Context, in *GetDistributorBlockRequest, opts ...grpc.CallOption) (*DistributorBlock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributorBlock)
	err := c.cc.Invoke(ctx, DistributorService_GetDistributorBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) SelectDistributorBlocks(ctx context.Context, in *SelectDistributorBlocksRequest, opts ...grpc.CallOption) (*DistributorBlocksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributorBlocksList)
	err := c.cc.Invoke(ctx, DistributorService_SelectDistributorBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) BlockDistributor(ctx context.Context, in *BlockDistributorRequest, opts ...grpc.CallOption) (*DistributorBlock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributorBlock)
	err := c.cc.Invoke(ctx, DistributorService_BlockDistributor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorServiceClient) UnblockDistributor(ctx context.Context, in *UnblockDistributorRequest, opts ...grpc.CallOption) (*DistributorBlock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistributorBlock)
	err := c.cc.Invoke(ctx, DistributorService_UnblockDistributor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributorServiceServer is the server API for DistributorService service.
// All implementations must embed UnimplementedDistributorServiceServer
// for forward compatibility.
type DistributorServiceServer interface {
	CreateDistributor(context.Context, *CreateDistributorRequest) (*Distributor, error)
	GetDistributor(context.Context, *GetDistributorRequest) (*Distributor, error)
	SelectDistributors(context.Context, *SelectDistributorsRequest) (*DistributorList, error)
	UpdateDistributorName(context.Context, *UpdateDistributorNameRequest) (*Distributor, error)
	UpdateDistributorIcon(context.Context, *UpdateDistributorIconRequest) (*Distributor, error)
	SetDistributorStatusInactive(context.Context, *SetDistributorStatusInactiveRequest) (*Distributor, error)
	SetDistributorStatusActive(context.Context, *SetDistributorStatusActiveRequest) (*Distributor, error)
	GetDistributorBlock(context.Context, *GetDistributorBlockRequest) (*DistributorBlock, error)
	SelectDistributorBlocks(context.Context, *SelectDistributorBlocksRequest) (*DistributorBlocksList, error)
	// Admin methods
	BlockDistributor(context.Context, *BlockDistributorRequest) (*DistributorBlock, error)
	UnblockDistributor(context.Context, *UnblockDistributorRequest) (*DistributorBlock, error)
	mustEmbedUnimplementedDistributorServiceServer()
}

// UnimplementedDistributorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistributorServiceServer struct{}

func (UnimplementedDistributorServiceServer) CreateDistributor(context.Context, *CreateDistributorRequest) (*Distributor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistributor not implemented")
}
func (UnimplementedDistributorServiceServer) GetDistributor(context.Context, *GetDistributorRequest) (*Distributor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistributor not implemented")
}
func (UnimplementedDistributorServiceServer) SelectDistributors(context.Context, *SelectDistributorsRequest) (*DistributorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDistributors not implemented")
}
func (UnimplementedDistributorServiceServer) UpdateDistributorName(context.Context, *UpdateDistributorNameRequest) (*Distributor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistributorName not implemented")
}
func (UnimplementedDistributorServiceServer) UpdateDistributorIcon(context.Context, *UpdateDistributorIconRequest) (*Distributor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistributorIcon not implemented")
}
func (UnimplementedDistributorServiceServer) SetDistributorStatusInactive(context.Context, *SetDistributorStatusInactiveRequest) (*Distributor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDistributorStatusInactive not implemented")
}
func (UnimplementedDistributorServiceServer) SetDistributorStatusActive(context.Context, *SetDistributorStatusActiveRequest) (*Distributor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDistributorStatusActive not implemented")
}
func (UnimplementedDistributorServiceServer) GetDistributorBlock(context.Context, *GetDistributorBlockRequest) (*DistributorBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistributorBlock not implemented")
}
func (UnimplementedDistributorServiceServer) SelectDistributorBlocks(context.Context, *SelectDistributorBlocksRequest) (*DistributorBlocksList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDistributorBlocks not implemented")
}
func (UnimplementedDistributorServiceServer) BlockDistributor(context.Context, *BlockDistributorRequest) (*DistributorBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockDistributor not implemented")
}
func (UnimplementedDistributorServiceServer) UnblockDistributor(context.Context, *UnblockDistributorRequest) (*DistributorBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockDistributor not implemented")
}
func (UnimplementedDistributorServiceServer) mustEmbedUnimplementedDistributorServiceServer() {}
func (UnimplementedDistributorServiceServer) testEmbeddedByValue()                            {}

// UnsafeDistributorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributorServiceServer will
// result in compilation errors.
type UnsafeDistributorServiceServer interface {
	mustEmbedUnimplementedDistributorServiceServer()
}

func RegisterDistributorServiceServer(s grpc.ServiceRegistrar, srv DistributorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDistributorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistributorService_ServiceDesc, srv)
}

func _DistributorService_CreateDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).CreateDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_CreateDistributor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).CreateDistributor(ctx, req.(*CreateDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_GetDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).GetDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_GetDistributor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).GetDistributor(ctx, req.(*GetDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_SelectDistributors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDistributorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).SelectDistributors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_SelectDistributors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).SelectDistributors(ctx, req.(*SelectDistributorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_UpdateDistributorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistributorNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).UpdateDistributorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_UpdateDistributorName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).UpdateDistributorName(ctx, req.(*UpdateDistributorNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_UpdateDistributorIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistributorIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).UpdateDistributorIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_UpdateDistributorIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).UpdateDistributorIcon(ctx, req.(*UpdateDistributorIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_SetDistributorStatusInactive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDistributorStatusInactiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).SetDistributorStatusInactive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_SetDistributorStatusInactive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).SetDistributorStatusInactive(ctx, req.(*SetDistributorStatusInactiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_SetDistributorStatusActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDistributorStatusActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).SetDistributorStatusActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_SetDistributorStatusActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).SetDistributorStatusActive(ctx, req.(*SetDistributorStatusActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_GetDistributorBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistributorBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).GetDistributorBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_GetDistributorBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).GetDistributorBlock(ctx, req.(*GetDistributorBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_SelectDistributorBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDistributorBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).SelectDistributorBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_SelectDistributorBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).SelectDistributorBlocks(ctx, req.(*SelectDistributorBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_BlockDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).BlockDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_BlockDistributor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).BlockDistributor(ctx, req.(*BlockDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributorService_UnblockDistributor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockDistributorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributorServiceServer).UnblockDistributor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributorService_UnblockDistributor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributorServiceServer).UnblockDistributor(ctx, req.(*UnblockDistributorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributorService_ServiceDesc is the grpc.ServiceDesc for DistributorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributor.DistributorService",
	HandlerType: (*DistributorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDistributor",
			Handler:    _DistributorService_CreateDistributor_Handler,
		},
		{
			MethodName: "GetDistributor",
			Handler:    _DistributorService_GetDistributor_Handler,
		},
		{
			MethodName: "SelectDistributors",
			Handler:    _DistributorService_SelectDistributors_Handler,
		},
		{
			MethodName: "UpdateDistributorName",
			Handler:    _DistributorService_UpdateDistributorName_Handler,
		},
		{
			MethodName: "UpdateDistributorIcon",
			Handler:    _DistributorService_UpdateDistributorIcon_Handler,
		},
		{
			MethodName: "SetDistributorStatusInactive",
			Handler:    _DistributorService_SetDistributorStatusInactive_Handler,
		},
		{
			MethodName: "SetDistributorStatusActive",
			Handler:    _DistributorService_SetDistributorStatusActive_Handler,
		},
		{
			MethodName: "GetDistributorBlock",
			Handler:    _DistributorService_GetDistributorBlock_Handler,
		},
		{
			MethodName: "SelectDistributorBlocks",
			Handler:    _DistributorService_SelectDistributorBlocks_Handler,
		},
		{
			MethodName: "BlockDistributor",
			Handler:    _DistributorService_BlockDistributor_Handler,
		},
		{
			MethodName: "UnblockDistributor",
			Handler:    _DistributorService_UnblockDistributor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/distributor/distributor.proto",
}
