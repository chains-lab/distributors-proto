// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/employee/employee.proto

package cemployeeity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeService_GetEmployee_FullMethodName            = "/employee.EmployeeService/GetEmployee"
	EmployeeService_GetDistributorEmployee_FullMethodName = "/employee.EmployeeService/GetDistributorEmployee"
	EmployeeService_SelectEmployees_FullMethodName        = "/employee.EmployeeService/SelectEmployees"
	EmployeeService_UpdateEmployeeRole_FullMethodName     = "/employee.EmployeeService/UpdateEmployeeRole"
	EmployeeService_DeleteEmployee_FullMethodName         = "/employee.EmployeeService/DeleteEmployee"
	EmployeeService_SendInvite_FullMethodName             = "/employee.EmployeeService/SendInvite"
	EmployeeService_GetInvite_FullMethodName              = "/employee.EmployeeService/GetInvite"
	EmployeeService_SelectInvites_FullMethodName          = "/employee.EmployeeService/SelectInvites"
	EmployeeService_WithdrawInvite_FullMethodName         = "/employee.EmployeeService/WithdrawInvite"
	EmployeeService_AcceptInvite_FullMethodName           = "/employee.EmployeeService/AcceptInvite"
	EmployeeService_DeclineInvite_FullMethodName          = "/employee.EmployeeService/DeclineInvite"
)

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*Employee, error)
	GetDistributorEmployee(ctx context.Context, in *GetDistributorEmployeeRequest, opts ...grpc.CallOption) (*Employee, error)
	SelectEmployees(ctx context.Context, in *SelectEmployeesRequest, opts ...grpc.CallOption) (*EmployeesList, error)
	UpdateEmployeeRole(ctx context.Context, in *UpdateEmployeeRoleRequest, opts ...grpc.CallOption) (*Employee, error)
	DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Invites:
	SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*Invite, error)
	GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*Invite, error)
	SelectInvites(ctx context.Context, in *SelectInvitesRequest, opts ...grpc.CallOption) (*InvitesList, error)
	WithdrawInvite(ctx context.Context, in *WithdrawInviteRequest, opts ...grpc.CallOption) (*Invite, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*Invite, error)
	DeclineInvite(ctx context.Context, in *DeclineInviteRequest, opts ...grpc.CallOption) (*Invite, error)
}

type employeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeServiceClient(cc grpc.ClientConnInterface) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) GetEmployee(ctx context.Context, in *GetEmployeeRequest, opts ...grpc.CallOption) (*Employee, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Employee)
	err := c.cc.Invoke(ctx, EmployeeService_GetEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetDistributorEmployee(ctx context.Context, in *GetDistributorEmployeeRequest, opts ...grpc.CallOption) (*Employee, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Employee)
	err := c.cc.Invoke(ctx, EmployeeService_GetDistributorEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) SelectEmployees(ctx context.Context, in *SelectEmployeesRequest, opts ...grpc.CallOption) (*EmployeesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeesList)
	err := c.cc.Invoke(ctx, EmployeeService_SelectEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) UpdateEmployeeRole(ctx context.Context, in *UpdateEmployeeRoleRequest, opts ...grpc.CallOption) (*Employee, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Employee)
	err := c.cc.Invoke(ctx, EmployeeService_UpdateEmployeeRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeService_DeleteEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) SendInvite(ctx context.Context, in *SendInviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invite)
	err := c.cc.Invoke(ctx, EmployeeService_SendInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) GetInvite(ctx context.Context, in *GetInviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invite)
	err := c.cc.Invoke(ctx, EmployeeService_GetInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) SelectInvites(ctx context.Context, in *SelectInvitesRequest, opts ...grpc.CallOption) (*InvitesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvitesList)
	err := c.cc.Invoke(ctx, EmployeeService_SelectInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) WithdrawInvite(ctx context.Context, in *WithdrawInviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invite)
	err := c.cc.Invoke(ctx, EmployeeService_WithdrawInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invite)
	err := c.cc.Invoke(ctx, EmployeeService_AcceptInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) DeclineInvite(ctx context.Context, in *DeclineInviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invite)
	err := c.cc.Invoke(ctx, EmployeeService_DeclineInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
// All implementations must embed UnimplementedEmployeeServiceServer
// for forward compatibility.
type EmployeeServiceServer interface {
	GetEmployee(context.Context, *GetEmployeeRequest) (*Employee, error)
	GetDistributorEmployee(context.Context, *GetDistributorEmployeeRequest) (*Employee, error)
	SelectEmployees(context.Context, *SelectEmployeesRequest) (*EmployeesList, error)
	UpdateEmployeeRole(context.Context, *UpdateEmployeeRoleRequest) (*Employee, error)
	DeleteEmployee(context.Context, *DeleteEmployeeRequest) (*emptypb.Empty, error)
	// Invites:
	SendInvite(context.Context, *SendInviteRequest) (*Invite, error)
	GetInvite(context.Context, *GetInviteRequest) (*Invite, error)
	SelectInvites(context.Context, *SelectInvitesRequest) (*InvitesList, error)
	WithdrawInvite(context.Context, *WithdrawInviteRequest) (*Invite, error)
	AcceptInvite(context.Context, *AcceptInviteRequest) (*Invite, error)
	DeclineInvite(context.Context, *DeclineInviteRequest) (*Invite, error)
	mustEmbedUnimplementedEmployeeServiceServer()
}

// UnimplementedEmployeeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeServiceServer struct{}

func (UnimplementedEmployeeServiceServer) GetEmployee(context.Context, *GetEmployeeRequest) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) GetDistributorEmployee(context.Context, *GetDistributorEmployeeRequest) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistributorEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) SelectEmployees(context.Context, *SelectEmployeesRequest) (*EmployeesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectEmployees not implemented")
}
func (UnimplementedEmployeeServiceServer) UpdateEmployeeRole(context.Context, *UpdateEmployeeRoleRequest) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeRole not implemented")
}
func (UnimplementedEmployeeServiceServer) DeleteEmployee(context.Context, *DeleteEmployeeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeeServiceServer) SendInvite(context.Context, *SendInviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvite not implemented")
}
func (UnimplementedEmployeeServiceServer) GetInvite(context.Context, *GetInviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvite not implemented")
}
func (UnimplementedEmployeeServiceServer) SelectInvites(context.Context, *SelectInvitesRequest) (*InvitesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInvites not implemented")
}
func (UnimplementedEmployeeServiceServer) WithdrawInvite(context.Context, *WithdrawInviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInvite not implemented")
}
func (UnimplementedEmployeeServiceServer) AcceptInvite(context.Context, *AcceptInviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedEmployeeServiceServer) DeclineInvite(context.Context, *DeclineInviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineInvite not implemented")
}
func (UnimplementedEmployeeServiceServer) mustEmbedUnimplementedEmployeeServiceServer() {}
func (UnimplementedEmployeeServiceServer) testEmbeddedByValue()                         {}

// UnsafeEmployeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeServiceServer will
// result in compilation errors.
type UnsafeEmployeeServiceServer interface {
	mustEmbedUnimplementedEmployeeServiceServer()
}

func RegisterEmployeeServiceServer(s grpc.ServiceRegistrar, srv EmployeeServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeService_ServiceDesc, srv)
}

func _EmployeeService_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetEmployee(ctx, req.(*GetEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetDistributorEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistributorEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetDistributorEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetDistributorEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetDistributorEmployee(ctx, req.(*GetDistributorEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_SelectEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).SelectEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_SelectEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).SelectEmployees(ctx, req.(*SelectEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_UpdateEmployeeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).UpdateEmployeeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_UpdateEmployeeRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).UpdateEmployeeRole(ctx, req.(*UpdateEmployeeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeleteEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeleteEmployee(ctx, req.(*DeleteEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_SendInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).SendInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_SendInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).SendInvite(ctx, req.(*SendInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_GetInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).GetInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_GetInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).GetInvite(ctx, req.(*GetInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_SelectInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).SelectInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_SelectInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).SelectInvites(ctx, req.(*SelectInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_WithdrawInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).WithdrawInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_WithdrawInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).WithdrawInvite(ctx, req.(*WithdrawInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_AcceptInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_DeclineInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).DeclineInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeService_DeclineInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).DeclineInvite(ctx, req.(*DeclineInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeService_ServiceDesc is the grpc.ServiceDesc for EmployeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployee",
			Handler:    _EmployeeService_GetEmployee_Handler,
		},
		{
			MethodName: "GetDistributorEmployee",
			Handler:    _EmployeeService_GetDistributorEmployee_Handler,
		},
		{
			MethodName: "SelectEmployees",
			Handler:    _EmployeeService_SelectEmployees_Handler,
		},
		{
			MethodName: "UpdateEmployeeRole",
			Handler:    _EmployeeService_UpdateEmployeeRole_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _EmployeeService_DeleteEmployee_Handler,
		},
		{
			MethodName: "SendInvite",
			Handler:    _EmployeeService_SendInvite_Handler,
		},
		{
			MethodName: "GetInvite",
			Handler:    _EmployeeService_GetInvite_Handler,
		},
		{
			MethodName: "SelectInvites",
			Handler:    _EmployeeService_SelectInvites_Handler,
		},
		{
			MethodName: "WithdrawInvite",
			Handler:    _EmployeeService_WithdrawInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _EmployeeService_AcceptInvite_Handler,
		},
		{
			MethodName: "DeclineInvite",
			Handler:    _EmployeeService_DeclineInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/employee/employee.proto",
}
